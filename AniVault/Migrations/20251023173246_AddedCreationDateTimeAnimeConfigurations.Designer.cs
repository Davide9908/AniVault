// <auto-generated />
using System;
using AniVault.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AniVault.Migrations
{
    [DbContext(typeof(AniVaultDbContext))]
    [Migration("20251023173246_AddedCreationDateTimeAnimeConfigurations")]
    partial class AddedCreationDateTimeAnimeConfigurations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AniVault.Database.AnimeConfiguration", b =>
                {
                    b.Property<int>("AnimeConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("anime_configuration_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AnimeConfigurationId"));

                    b.Property<string>("AnimeFolderRelativePath")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("anime_folder_relative_path");

                    b.Property<string>("AnimeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("anime_name");

                    b.Property<bool>("AutoDownloadEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_download_enabled");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<short?>("EpisodesNumberOffset")
                        .HasColumnType("smallint")
                        .HasColumnName("episodes_number_offset");

                    b.Property<string>("FileNameTemplate")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("file_name_template");

                    b.Property<int?>("MyAnimeListId")
                        .HasColumnType("integer")
                        .HasColumnName("my_anime_list_id");

                    b.HasKey("AnimeConfigurationId")
                        .HasName("pk_anime_configuration");

                    b.HasIndex("AnimeName")
                        .HasDatabaseName("ix_anime_configuration_anime_name");

                    b.HasIndex("MyAnimeListId")
                        .IsUnique()
                        .HasDatabaseName("ix_anime_configuration_my_anime_list_id");

                    b.ToTable("AnimeConfiguration");
                });

            modelBuilder.Entity("AniVault.Database.ApiUser", b =>
                {
                    b.Property<int>("ApiUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("api_user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApiUserId"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("api_key");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_name");

                    b.HasKey("ApiUserId")
                        .HasName("pk_api_user");

                    b.HasIndex("ApiKey")
                        .IsUnique()
                        .HasDatabaseName("ix_api_user_api_key");

                    b.ToTable("ApiUser");
                });

            modelBuilder.Entity("AniVault.Database.ScheduledTask", b =>
                {
                    b.Property<int>("ScheduledTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("scheduled_task_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScheduledTaskId"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<int?>("IntervalSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("interval_seconds");

                    b.Property<DateTime>("LastFinish")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_finish");

                    b.Property<DateTime>("LastStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_start");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("task_name");

                    b.HasKey("ScheduledTaskId")
                        .HasName("pk_scheduled_task");

                    b.ToTable("ScheduledTask");
                });

            modelBuilder.Entity("AniVault.Database.TelegramChannel", b =>
                {
                    b.Property<int>("TelegramChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("telegram_channel_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TelegramChannelId"));

                    b.Property<long>("AccessHash")
                        .HasColumnType("bigint")
                        .HasColumnName("access_hash");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("channel_name");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    b.Property<bool>("IsAnimeChannel")
                        .HasColumnType("boolean")
                        .HasColumnName("is_anime_channel");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("TelegramChannelId")
                        .HasName("pk_telegram_channel");

                    b.HasIndex("ChatId")
                        .IsUnique()
                        .HasDatabaseName("ix_telegram_channel_chat_id");

                    b.ToTable("TelegramChannel");
                });

            modelBuilder.Entity("AniVault.Database.TelegramMediaDocument", b =>
                {
                    b.Property<int>("TelegramMediaDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("telegram_media_document_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TelegramMediaDocumentId"));

                    b.Property<long>("AccessHash")
                        .HasColumnType("bigint")
                        .HasColumnName("access_hash");

                    b.Property<int>("AnimeConfigurationId")
                        .HasColumnType("integer")
                        .HasColumnName("anime_configuration_id");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<long>("DataTransmitted")
                        .HasColumnType("bigint")
                        .HasColumnName("data_transmitted");

                    b.Property<int>("DownloadStatus")
                        .HasColumnType("integer")
                        .HasColumnName("download_status");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint")
                        .HasColumnName("file_id");

                    b.Property<byte[]>("FileReference")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("file_reference");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("filename");

                    b.Property<string>("FilenameFromTelegram")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("filename_from_telegram");

                    b.Property<string>("FilenameToUpdate")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("filename_to_update");

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update_date_time");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("mime_type");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("TelegramMessageId")
                        .HasColumnType("integer")
                        .HasColumnName("telegram_message_id");

                    b.HasKey("TelegramMediaDocumentId")
                        .HasName("pk_telegram_media_document");

                    b.HasIndex("AnimeConfigurationId")
                        .HasDatabaseName("ix_telegram_media_document_anime_configuration_id");

                    b.HasIndex("TelegramMessageId")
                        .IsUnique()
                        .HasDatabaseName("ix_telegram_media_document_telegram_message_id");

                    b.HasIndex("FileId", "TelegramMessageId")
                        .IsUnique()
                        .HasDatabaseName("ix_telegram_media_document_file_id_telegram_message_id");

                    b.ToTable("TelegramMediaDocument");
                });

            modelBuilder.Entity("AniVault.Database.TelegramMessage", b =>
                {
                    b.Property<int>("TelegramMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("telegram_message_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TelegramMessageId"));

                    b.Property<int>("MessageId")
                        .HasColumnType("integer")
                        .HasColumnName("message_id");

                    b.Property<int>("MessageStatus")
                        .HasColumnType("integer")
                        .HasColumnName("message_status");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("message_text");

                    b.Property<DateTime>("ReceivedDatetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_datetime");

                    b.Property<int>("TelegramChannelId")
                        .HasColumnType("integer")
                        .HasColumnName("telegram_channel_id");

                    b.Property<DateTime?>("UpdateDatetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_datetime");

                    b.HasKey("TelegramMessageId")
                        .HasName("pk_telegram_message");

                    b.HasIndex("TelegramChannelId")
                        .HasDatabaseName("ix_telegram_message_telegram_channel_id");

                    b.HasIndex("MessageId", "TelegramChannelId")
                        .IsUnique()
                        .HasDatabaseName("ix_telegram_message_message_id_telegram_channel_id");

                    b.ToTable("TelegramMessage");
                });

            modelBuilder.Entity("AniVault.Database.TelegramMediaDocument", b =>
                {
                    b.HasOne("AniVault.Database.AnimeConfiguration", "AnimeConfiguration")
                        .WithMany("RelatedEpisodes")
                        .HasForeignKey("AnimeConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_telegram_media_document_anime_configuration_anime_configuratio");

                    b.HasOne("AniVault.Database.TelegramMessage", "TelegramMessage")
                        .WithOne("MediaDocument")
                        .HasForeignKey("AniVault.Database.TelegramMediaDocument", "TelegramMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_telegram_media_document_telegram_message_telegram_message_id");

                    b.Navigation("AnimeConfiguration");

                    b.Navigation("TelegramMessage");
                });

            modelBuilder.Entity("AniVault.Database.TelegramMessage", b =>
                {
                    b.HasOne("AniVault.Database.TelegramChannel", "TelegramChannel")
                        .WithMany("TelegramMessages")
                        .HasForeignKey("TelegramChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_telegram_message_telegram_channel_telegram_channel_id");

                    b.Navigation("TelegramChannel");
                });

            modelBuilder.Entity("AniVault.Database.AnimeConfiguration", b =>
                {
                    b.Navigation("RelatedEpisodes");
                });

            modelBuilder.Entity("AniVault.Database.TelegramChannel", b =>
                {
                    b.Navigation("TelegramMessages");
                });

            modelBuilder.Entity("AniVault.Database.TelegramMessage", b =>
                {
                    b.Navigation("MediaDocument");
                });
#pragma warning restore 612, 618
        }
    }
}
